<%@ Master Language="C#" AutoEventWireup="true" CodeBehind="Client.master.cs" Inherits="fyp.Client" %>

<!DOCTYPE html>
<html lang="en">
<head>
    <title>
        <asp:ContentPlaceHolder ID="TitleContent" runat="server" />
    </title>
    <link rel="icon" href="images/logo.png" type="image" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
    <link rel="stylesheet" href="assets/css/main.css" />
    <link rel="stylesheet" href="assets/css/notifyAlert.css" />
    <!-- jQuery Library -->
    <script src="assets/js/jquery.min.js"></script>
    <!-- SignalR library -->
    <script src="assets/scripts/jquery.signalR-2.4.3.min.js"></script>
    <!-- SignalR Hubs script generated by the server -->
    <script src="/signalr/hubs"></script>
    <asp:ContentPlaceHolder ID="HeadContent" runat="server" />
    <style>
        .modal {
            display: none; /* Hidden by default */
            position: fixed;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.5); /* Black with opacity */
        }

        /* Modal content */
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border-radius: 10px;
            width: 500px;
            text-align: center;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            position: relative;
        }

        /* Close button */
        .close {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 24px;
            font-weight: bold;
            color: #aaa;
            cursor: pointer;
        }

            .close:hover,
            .close:focus {
                color: black;
                text-decoration: none;
                cursor: pointer;
            }

        /* Buttons */
        .modal-buttons {
            margin-top: 20px;
        }

        /* LOGIN button */
        .btn-primary {
            background-color: black;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
        }

            .btn-primary:hover {
                opacity: 0.8;
            }


        .circle {
            width: 30px; /* Smaller width */
            height: 30px; /* Smaller height */
            border-radius: 50%; /* Makes the div a circle */
            background-color: #ff0000;
            display: flex;
            justify-content: center; /* Center the number horizontally */
            align-items: center; /* Center the number vertically */
            font-size: 16px; /* Smaller font size */
            color: #ffffff;
        }

        .hidden {
            display: none; /* Hide the circle when the count is 0 */
        }

        .notification > strong {
            color: white;
        }

        .back-button {
    cursor: pointer;
    width: 50px;
    height: 50px;
    border: none;
    /* Add more styling as needed */
}
    </style>
</head>
<body class="left-sidebar is-preload">
    <div id="page-wrapper">

        <!-- Header -->
        <div id="header">
            <!-- Inner -->
            <div class="inner">
                <header>
                    <h1><a href="Home.aspx" id="logo">LibraNet</a></h1>
                </header>
            </div>

            <!-- Nav -->
            <nav id="nav">
                <ul>
                    <li><a href="Home.aspx">Home</a></li>
                    <li><a href="BookSearch.aspx">View Books</a></li>
                    <li><a href="#" onclick="checkLoginRec()">Recommendation Books</a></li>
                    <li><a href="#" onclick="checkLoginLoan()">Loan Books</a></li>
                    <li>
                        <a href="#" onclick="checkLogin()">Account</a>
                        <ul id="AccDropdown" runat="server">
                            <li>
                                <div class="circle <%= getNotiCount() == 0 ? "hidden" : "" %>">
                                    <%= getNotiCount() %>
                                </div>
                                <a href="Announcement.aspx" style="position: relative; display: inline-flex; align-items: center;">Inbox & 
                                Announcement 


                                </a></li>
                            <li id="DashDropdown" runat="server"><a href="DashManagement.aspx">DashBoard</a></li>
                            <li id="fav" runat="server"><a href="FavouriteGroup.aspx">Favourite Books</a></li>
                            <li id="history" runat="server"><a href="History.aspx">History</a></li>
                            <li><a href="profile.aspx">profile</a></li>
                            <li><a href="Logout.aspx">Log Out</a></li>
                        </ul>
                    </li>
                </ul>
            </nav>
        </div>

        <div class="wrapper style1">
            <div class="container">
                <!--Body Content-->

                <asp:ContentPlaceHolder ID="MainContent" runat="server" />
            </div>
        </div>

        <!-- Footer -->
        <div id="footer">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                        <!-- Contact -->
                        <section class="contact">
                            <header>
                                <h3>More About Us?</h3>
                            </header>
                            <p>Urna nisl non quis interdum mus ornare ridiculus egestas ridiculus lobortis vivamus tempor aliquet.</p>
                            <ul class="icons">
                                <li><a href="#" class="icon brands fa-twitter"><span class="label">Twitter</span></a></li>
                                <li><a href="#" class="icon brands fa-facebook-f"><span class="label">Facebook</span></a></li>
                                <li><a href="#" class="icon brands fa-instagram"><span class="label">Instagram</span></a></li>
                                <li><a href="#" class="icon brands fa-pinterest"><span class="label">Pinterest</span></a></li>
                                <li><a href="#" class="icon brands fa-dribbble"><span class="label">Dribbble</span></a></li>
                                <li><a href="#" class="icon brands fa-linkedin-in"><span class="label">Linkedin</span></a></li>
                            </ul>
                        </section>

                        <!-- Copyright -->
                        <div class="copyright">
                            <ul class="menu">
                                <li>&copy; Untitled. All rights reserved.</li>
                                <li>Design: <a href="http://html5up.net">HTML5 UP</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
    <div id="loginModal" class="modal">
        <div class="modal-content">
            <span id="closeModal" class="close">&times;</span>
            <h2 style="font-weight: 900; font-size: 1.25em; text-align: left;">Login Required</h2>
            <p>Please go to the login page.</p>
            <div class="modal-buttons" style="text-align: left;">
                <button id="loginButton" class="btn btn-primary" style="width: 280px;">
                    LOGIN</button>
            </div>
        </div>
    </div>
    <div id="notificationContainer" class="notification-container">
    </div>
</body>
<asp:ContentPlaceHolder ID="ScriptContent" runat="server" />
<script src="assets/js/main.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        if (typeof $.signalR === "undefined") {
            console.error("SignalR is not loaded.");
        } else {
            console.log("SignalR loaded successfully.");

            // Set up the SignalR connection with the userId query string
            var userId = <%= Session["UserId"] != null ? Session["UserId"].ToString() : "0" %>; // Assuming the userId is stored in a hidden input
              if (!userId) {
                  console.error("User ID is missing. SignalR connection will fail.");
                  return;
              }
              $.connection.hub.qs = { userId: userId };

              // Start the connection to SignalR
              $.connection.hub.start()
                  .done(function () {
                      console.log("Connected to SignalR. Connection ID: " + $.connection.hub.id);
                  })
                  .fail(function (error) {
                      console.error("Failed to connect to SignalR: " + error);
                  });

              // Set up the SignalR hub proxy for notifications
              var notificationHub = $.connection.notificationHub;

              // Define the client-side method to receive inbox notifications
              notificationHub.client.broadcastInbox = function (title, content, sendAt) {
                  console.log("Inbox notification received:", title, content, sendAt);
                  let formattedSendAt;
                  try {
                      formattedSendAt = new Date(sendAt).toLocaleString();
                  } catch (error) {
                      console.error("Error formatting sendAt date:", error);
                      formattedSendAt = "Unknown date";
                  }
                  showNotification(`${title} (Received on ${formattedSendAt})`, content, "inbox");
            };

            var notifyLoan = <%= notifyLoan.ToString().ToLower() %>;
            console.log(notifyLoan);
            // Define the client-side method for overdue notifications
            if (notifyLoan) {
                notificationHub.client.overdueNotification = function (title, content) {
                    console.log("Overdue notification received:", title, content);
                    showNotification(`${title}`, content, "overdue");
                };
            }

              // Define the client-side method to receive announcements
              notificationHub.client.receiveAnnouncement = function (title, content) {
                  console.log("Announcement received:", title, content);
                  showNotification(title, content, "announcement");
              };

              // Function to show notifications
              function showNotification(title, content, type) {
                  console.log("Show notification called:", title, content, type);

                  // Create a new notification element
                  const notification = document.createElement("div");
                  notification.classList.add("notification");
                  notification.innerHTML = `
                    <button class="close-btn">&times;</button>
                    <strong>${title}</strong>
                    <p>${content}</p>
                `;

                  // Set the notification type
                  document.querySelector("#notificationContainer").setAttribute("data-type", type);

                  // Append the notification to the container
                  const container = document.querySelector("#notificationContainer");
                  container.appendChild(notification);

                  // Show the container if it's hidden
                  container.style.display = "block";

                  // Close button functionality
                  notification.querySelector(".close-btn").addEventListener("click", () => {
                      notification.style.opacity = "0";
                      setTimeout(() => notification.remove(), 300); // Smooth fade-out
                  });

                  // Automatically hide the notification after 15 seconds
                  setTimeout(() => {
                      if (notification) {
                          notification.style.opacity = "0";
                          setTimeout(() => notification.remove(), 300); // Smooth fade-out
                      }
                  }, 15000);
              }
          }

      });
    // Function to display notifications
    function displayNotification(title, content, type, sendAt) {
        const notificationContainer = document.querySelector("#notificationContainer");
        if (!notificationContainer) return;

        let formattedDate = "";
        if (sendAt) {
            try {
                formattedDate = new Date(sendAt).toLocaleString();
            } catch (error) {
                formattedDate = "Unknown date";
            }
        }

        const notification = document.createElement("div");
        notification.classList.add("notification");
        notification.innerHTML = `
            <button class="close-btn">&times;</button>
            <strong>${title}</strong>
            <p>${content}</p>
            <small>${formattedDate}</small>
        `;

        notificationContainer.appendChild(notification);
        notificationContainer.style.display = "block";

        // Close button functionality
        notification.querySelector(".close-btn").addEventListener("click", () => {
            notification.remove();
        });

        // Auto-remove after 15 seconds
        setTimeout(() => {
            if (notification) notification.remove();
        }, 15000);
    }

    function checkLogin() {
        var isAuthenticated = '<%= HttpContext.Current.User.Identity.IsAuthenticated.ToString() %>' === 'True';

        if (!isAuthenticated) {
            // Show the modal
            document.getElementById('loginModal').style.display = 'block';

            // Handle the LOGIN button
            document.getElementById('loginButton').onclick = function () {
                window.location.href = 'Login.aspx'; // Redirect to login
            };

            // Handle the close button (X)
            document.getElementById('closeModal').onclick = function () {
                document.getElementById('loginModal').style.display = 'none'; // Close the modal
            };
        } else {
            // Redirect to the profile page if authenticated
            window.location.href = 'profile.aspx';
        }
    }



    function checkLoginRec() {
        var isAuthenticated = '<%= HttpContext.Current.User.Identity.IsAuthenticated.ToString() %>' === 'True'; // Check authentication status


          if (!isAuthenticated) {
              // Show the modal if not authenticated
              document.getElementById('loginModal').style.display = 'block';

              // Handle the LOGIN button
              document.getElementById('loginButton').onclick = function () {
                  window.location.href = 'Login.aspx'; // Redirect to login
              };

              // Handle the close button (X)
              document.getElementById('closeModal').onclick = function () {
                  document.getElementById('loginModal').style.display = 'none'; // Close the modal
              };
          } else {
              // Check the user's role
              var userRole = '<%= Session["UserRole"] != null ? Session["UserRole"] : "Guest" %>';
            if (userRole === 'Admin' || userRole === 'Staff') {
                // Display an alert or redirect to an error page for unauthorized access
                alert('Admins and Staff cannot access the user page.');
                //       window.location.href = '/error/403Forbidden.aspx'; // Redirect to a 403 Forbidden error page
            } else {
                // Redirect to the profile page if authenticated and role is valid
                window.location.href = 'Recommendation.aspx';
            }
        }
    }

    function checkLoginLoan() {
        var isAuthenticated = '<%=HttpContext.Current.User.Identity.IsAuthenticated.ToString() %>' === 'True'; // Check authentication status

            if (!isAuthenticated) {
                // Show the modal if not authenticated
                document.getElementById('loginModal').style.display = 'block';

                // Handle the LOGIN button
                document.getElementById('loginButton').onclick = function () {
                    window.location.href = 'Login.aspx'; // Redirect to login
                };

                // Handle the close button (X)
                document.getElementById('closeModal').onclick = function () {
                    document.getElementById('loginModal').style.display = 'none'; // Close the modal
                };
            } else {
                // Check the user's role
                var userRole = '<%= Session["UserRole"] != null ? Session["UserRole"] : "Guest" %>';
            if (userRole === 'Admin' || userRole === 'Staff') {
                // Display an alert or redirect to an error page for unauthorized access
                alert('Admins and Staff cannot access the user page.');
                // window.location.href = '/error/403Forbidden.aspx'; // Redirect to a 403 Forbidden error page
            } else {
                // Redirect to the profile page if authenticated and role is valid
                window.location.href = 'LoanList.aspx';
            }
        }
    }

    function goBackAndReload() {
        // Check if there is a referrer (previous page)
        if (document.referrer) {
            // Navigate to the previous page and reload it
            
            window.location.href = document.referrer;
        } else {
            // Fallback if no referrer is available
            history.back();
        }
    }
</script>

</html>
